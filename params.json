{"name":"Pyqcheck","tagline":"PyQCheck","body":"[![Build Status](https://travis-ci.org/futoase/PyQCheck.png?branch=master)](https://travis-ci.org/futoase/PyQCheck)\r\n\r\n# What is PyQCheck?\r\n\r\nPyQCheck is a Quick Check-like testing framework based on the idea of Haskell Quick Check.\r\n\r\n- This framework is for random data testing.\r\n- The function's interface was referred from [macchiato.js](http://voqn.github.com/macchiato/). (from the top page...)\r\n\r\n# Which python version does this support? \r\n\r\nThis framework worked on python version 3.3 or later\r\n\r\n# How to Install\r\n\r\n```\r\n> pip install PyQCheck\r\n```\r\n\r\nor\r\n\r\n```\r\n> easy_install PyQCheck\r\n```\r\n\r\n# How to Use PyQCheck\r\n## Writing test\r\n\r\n- At method chain\r\n\r\n``` python\r\nfrom pyqcheck import PyQCheck, Arbitrary\r\n\r\ndef eq(x,y):\r\n  return x * y == y * x and x + y == y + x\r\n\r\nPyQCheck(verbose=True).add(\r\n  Arbitrary('boolean', 'boolean').property(\r\n    '!(x || y) == !x && !y', lambda x, y: (not(x or y)) == ((not x) and (not y))\r\n  )\r\n).add(\r\n  Arbitrary('integer', 'integer').property(\r\n    'x * y == y * x and x + y == y + x', eq\r\n  )\r\n).run(10).result() # run(10) is test count == 10\r\n```\r\n\r\n- At decorator\r\n\r\n``` python\r\nfrom pyqcheck import PyQCheck, Arbitrary, set_arbitrary\r\n\r\n@set_arbitrary('boolean', 'boolean')\r\ndef de_morgan(x, y):\r\n  '''\r\n  !(x || y) == !x && !y', lambda x, y: (not(x or y)) == ((not x) and (not y))\r\n  '''\r\n  return (not(x or y)) == ((not x) and (not y))\r\n\r\n@set_arbitrary('integer', 'integer')\r\ndef eq(x, y):\r\n  '''\r\n  x * y == y * x and x + y == y + x\r\n  '''\r\n  return x * y == y * x and x + y == y + x\r\n\r\nPyQCheck(verbose=True).run(10).result() # run(10) is test count == 10\r\n```\r\n\r\n## Test Result.\r\n\r\n```\r\n----- PyQCheck test results... -----\r\nlabel: !(x || y) == !x && !y\r\nsuccess: 10   \r\nfailure: 0\r\nverbose:\r\n  ☀  <lambda>(True, True)\r\n  ☀  <lambda>(False, False)\r\n  ☀  <lambda>(False, True)\r\n  ☀  <lambda>(True, True)\r\n  ☀  <lambda>(True, True)\r\n  ☀  <lambda>(True, True)\r\n  ☀  <lambda>(True, True)\r\n  ☀  <lambda>(True, False)\r\n  ☀  <lambda>(False, True)\r\n  ☀  <lambda>(True, False)\r\n-----\r\nlabel: x * y == y * x and x + y == y + x\r\nsuccess: 10\r\nfailure: 0\r\nverbose: \r\n  ☀  eq(5619883977492185900, 8098677974428651270)\r\n  ☀  eq(1083625604502060169, 8458294345657310737)\r\n  ☀  eq(4669876018772361359, 6247727992957273395)\r\n  ☀  eq(8339760176857203915, 8345011171974202548)\r\n  ☀  eq(7278259878279970866, 4100741748945006135)\r\n  ☀  eq(4817262410454816318, 3084576882465980476)\r\n  ☀  eq(2635121478675656588, 7568822804535567953)\r\n  ☀  eq(6708571901087888356, 1255734967659271542)\r\n  ☀  eq(2208040650061775673, 7460005457506446202)\r\n  ☀  eq(5032528890931210411, 2911935080322536883)\r\n-----\r\n```\r\n\r\n# Supports arbitrary data type.\r\n\r\n- PyQString ('string')\r\n- PyQInteger ('integer')\r\n- PyQNumber ('number')\r\n- PyQHiragana ('hiragana')\r\n- PyQKatakana ('katakana')\r\n- PyQMomoclo ('momoclo')\r\n\r\n# Setting arbitrary limit.\r\n\r\n``` python\r\nfrom pyqcheck import PyQCheck, Arbitrary\r\n\r\nPyQCheck().add(\r\n  Arbitrary(\r\n    ('integer', dict(min=10, max=100)), # range of 10 - 100\r\n    ('integer', dict(min=30)), # range of 30 - max of default\r\n  ).property(\r\n    '10 <= x <= 100 and y >= 30', lambda x, y : 10 <= x <= 100 and y >= 30\r\n  )\r\n)\r\n\r\n@set_arbitrary(\r\n  ('string', dict(min=10)),\r\n  ('integer', dict(max=30)))\r\ndef repeat(chars, n):\r\n  '''\r\n  (chars * n).split(chars) == n + 1\r\n  '''\r\n  repeat_string = chars * n\r\n  return len(repeat_string.split(chars)) == n + 1\r\n\r\nPyQCheck(verbose=True).run(10).result()\r\n```\r\n\r\n## Test result.\r\n\r\n```\r\n----- PyQCheck test results... -----\r\nlabel: 10 <= x <= 100 and y >= 30\r\nsuccess: 10   \r\nfailure: 0\r\nverbose:\r\n  ☀  <lambda>(73, 2056916856135336406)\r\n  ☀  <lambda>(41, 1673657213508719924)\r\n  ☀  <lambda>(86, 1591870911858630638)\r\n  ☀  <lambda>(82, 7062489949342175354)\r\n  ☀  <lambda>(63, 4626992076240878338)\r\n  ☀  <lambda>(43, 7448218345050658578)\r\n  ☀  <lambda>(73, 412908156141536339)\r\n  ☀  <lambda>(45, 3541728769292566383)\r\n  ☀  <lambda>(36, 8830667218769458940)\r\n  ☀  <lambda>(73, 5267004395616289964)\r\n-----\r\nlabel: (chars * n).split(chars) == n + 1\r\nsuccess: 10\r\nfailure: 0\r\nverbose: \r\n  ☀  repeat('f87YTMsjoob', 10)\r\n  ☀  repeat('SeFwvHNrmLAQozfKq3JE', 17)\r\n  ☀  repeat('N7rM3F9lraN', 23)\r\n  ☀  repeat('npHHcqBCGWrnHy2Uy', 27)\r\n  ☀  repeat('Xhv9XXynr9x0VBvmt', 5)\r\n  ☀  repeat('raxB8IobOeFxNnfM4Mk', 1)\r\n  ☀  repeat('W9uDeBi6bbA', 5)\r\n  ☀  repeat('qSxlbKKN8DM', 16)\r\n  ☀  repeat('0ystvLvvNdcQa2uRH', 13)\r\n  ☀  repeat('638ssJbQBgnZ65Ohfy', 23)\r\n-----\r\n```\r\n\r\n# PyQCheck supports multi process.\r\n\r\n``` python\r\nfrom decimal import Decimal, getcontext\r\nfrom pyqcheck import PyQCheck, Arbitrary\r\n\r\ngetcontext().proc = 60\r\n\r\nPyQCheck(process=2).add(\r\n  Arbitrary('integer', 'integer', 'integer').property(\r\n    'x + y + z == z + y + x',\r\n    lambda x, y, z : x + y + z == z + y + x\r\n  )\r\n).add(\r\n  Arbitrary('number', 'number', 'number').property(\r\n    'Decimal(x) + Decimal(y) + Decimal(z) == Decimal(z) + Decimal(y) + Decimal(x)',\r\n    lambda x, y, z : Decimal(x) + Decimal(y) + Decimal(z) == Decimal(z) + Decimal(y) + Decimal(x)\r\n  )\r\n).add(\r\n  Arbitrary(\r\n    ('string', dict(max=10))\r\n  ).property(\r\n    'len(chars) <= 10',\r\n    lambda chars : len(chars) <= 10\r\n  )\r\n).run(100).result()\r\n```\r\n\r\n# Able to catch errors.\r\n\r\n- Sample\r\n\r\n``` python\r\nfrom pyqcheck import PyQCheck, Arbitrary\r\n\r\ndef ten_or_less(n):\r\n  if n > 10:\r\n    raise ValueError\r\n  return True\r\n\r\nPyQCheck(verbose=True).add(\r\n  Arbitrary(('integer', dict(max=30))).property(\r\n    'n <= 10 == True', ten_or_less, (ValueError,)\r\n  )\r\n).run(10).result()\r\n```\r\n\r\n- Result\r\n\r\n```\r\n----- PyQCheck test results... -----\r\nlabel: n <= 10 == True\r\nsuccess: 4\r\nfailure: 0\r\nexceptions:\r\n  ValueError: 6\r\nverbose:\r\n  ☀  ten_or_less(6)\r\n  ☃  ten_or_less(27)\r\n  ☃  ten_or_less(27)\r\n  ☀  ten_or_less(5)\r\n  ☃  ten_or_less(21)\r\n  ☀  ten_or_less(10)\r\n  ☃  ten_or_less(18)\r\n  ☀  ten_or_less(2)\r\n  ☃  ten_or_less(18)\r\n  ☃  ten_or_less(12)\r\n-----\r\n```\r\n\r\n# Can create original arbitrary class.\r\n\r\n``` python\r\n\r\nfrom pyqcheck import PyQCheck, ArbitraryAbstraction, set_arbitrary\r\n\r\n# Class\r\nclass CountryArbitrary(ArbitraryAbstraction):\r\n  COUNTRIES = [\r\n    'JAPAN',\r\n    'GERMANY',\r\n    'USA',\r\n    'UK',\r\n    'AUSTRALIA'\r\n  ]\r\n\r\n  def __init__(self):\r\n    pass\r\n\r\n  def generate(self):\r\n    '''\r\n    generate of random length array.\r\n    '''\r\n    import random\r\n    return lambda : [random.choice(CountryArbitrary.COUNTRIES) for x in range(10)]\r\n\r\n@set_arbitrary(CountryArbitrary)\r\ndef thisCountryIHaveEverBeenTo(country_name):\r\n  '''\r\n  issubset({'JAPAN', 'GERMANY', 'USA', 'UK', 'AUSTRALIA'})\r\n  '''\r\n  return set(country_name).issubset({'JAPAN', 'GERMANY', 'USA', 'UK', 'AUSTRALIA'})\r\n\r\nPyQCheck(verbose=True).run(10).result()\r\n```\r\n\r\n# License\r\n\r\nMIT License\r\n\r\nCopyright (c) <2012> Keiji Matsuzaki <futoase@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}